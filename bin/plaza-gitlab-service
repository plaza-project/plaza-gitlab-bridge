#!/usr/bin/env python3

import logging
import json
from plaza_bridge import PlazaBridge
from plaza_bridge.legacy import (
    BlockArgument,
    BlockContext,
    CallbackBlockArgument,
    VariableBlockArgument,
    VariableClass,
    FormBasedServiceRegistration,
)
import gitlab

from plaza_gitlab_service import serializers, config
from plaza_gitlab_service.storage import sqlite_storage


class Registerer(FormBasedServiceRegistration):
    def get_call_to_action_text(self, extra_data):
        return """
        Introduce access data for gitlab:

        Gitlab instance: <input name="instance" type="url" value="https://gitlab.com" placeholder="URL for the gitlab instance">
        Access token:    <input name="token" type="text" placeholder="Generated access token">

        See <autolink><value placeholder="your-gitlab-instance" from="instance">/profile/personal_access_tokens</autolink> to get a access token
        """

    def register(self, data, extra_data):
        print(
            "User {} is registered with: {}".format(
                extra_data.user_id, json.dumps(data["form"], indent=4)
            )
        )

        plaza_user_id = extra_data.user_id
        gitlab_instance = data["form"]["instance"]
        gitlab_token = data["form"]["token"]

        gl = gitlab.Gitlab(gitlab_instance, private_token=gitlab_token)
        gl.auth()
        gitlab_user_id = gl.user.attributes["id"]
        username = gl.user.attributes["username"]
        self.storage.register_user(
            {
                "user_id": gitlab_user_id,
                "instance": gitlab_instance,
                "token": gitlab_token,
                "username": username,
            },
            plaza_user_id,
        )

        return True


STORAGE = sqlite_storage.get_default()

bridge = PlazaBridge(name="Gitlab - test",
                     # is_public=True,  # False by default
                     registerer=Registerer(STORAGE))


@bridge.callback
def get_owned_projects(_callback_name, extra_data):
    results = {}
    for user in STORAGE.get_gitlab_users(extra_data.user_id):
        gl = gitlab.Gitlab(user["instance"], user["token"])
        for project in gl.projects.list(owned=True):
            results[project.attributes["id"]] = {
                "name": project.attributes["name_with_namespace"]
            }

    return results


@bridge.operation(message="Save issues from own project %1 to list %2",
                  arguments=[
                      CallbackBlockArgument(str, get_owned_projects),
                      VariableBlockArgument(VariableClass.LIST),
                  ],
                  save_to=BlockContext.ARGUMENTS[1])
def get_issues(project_id, extra_data):
    for user in STORAGE.get_gitlab_users(extra_data.user_id):
        # TODO: save which user has access to which process
        gl = gitlab.Gitlab(user["instance"], user["token"])
        try:
            project = gl.projects.get(project_id, lazy=True)
            issues = project.issues.list()
        except Exception as e:
            # Maybe the token is not the correct one
            logging.info("[Get issues] Exception: {}".format(e))
            continue

        results = []
        for issue in issues:
            issue_id = "{project_id}/{issue_id}".format(
                project_id=project_id, issue_id=issue.attributes["iid"]
            )

            results.append(issue_id)
        return results

    raise Exception("Not found")


@bridge.operation(message="Create issue on %1 named %2. Save to %3",
                  arguments=[
                      CallbackBlockArgument(str, get_owned_projects),
                      BlockArgument(str, "Issue title"),
                    VariableBlockArgument(),
                  ],
                  save_to=BlockContext.ARGUMENTS[2])
def create_issue_on_project(project_id, issue_title, extra_data):
    for user in STORAGE.get_gitlab_users(extra_data.user_id):
        # TODO: save which user has access to which process
        gl = gitlab.Gitlab(user["instance"], user["token"])
        try:
            project = gl.projects.get(project_id, lazy=True)
            issue = project.issues.create({"title": issue_title})
            issue_id = "{project_id}/{issue_id}".format(
                project_id=project_id, issue_id=issue.attributes["iid"]
            )
            return issue_id

        except Exception as e:
            # Maybe the token is not the correct one
            logging.info("[Get issues] Exception: {}".format(e))
            continue

    raise Exception("Not found")


## Helper function
def _get_issue_property(issue_pointer, extra_data, getter):
   project_id, issue_id = issue_pointer.split('/')
   for user in STORAGE.get_gitlab_users(extra_data.user_id):
       # TODO: save which user has access to which process
       gl = gitlab.Gitlab(user["instance"], user["token"])
       try:
           project = gl.projects.get(project_id, lazy=True)
           issue = project.issues.get(issue_id)
       except Exception as e:
           # Maybe the token is not the correct one
           logging.info("[Get issues] Exception: {}".format(e))
           continue

       return getter(issue)

   raise Exception("Not found")


@bridge.getter(message="Is issue %1 open?",
               arguments=[
                   BlockArgument(str, "Add here an issue variable"),
               ],
               block_result_type=bool)
def is_issue_open(issue_pointer, extra_data):
    return _get_issue_property(issue_pointer, extra_data,
                               lambda issue: issue.attributes['state'] == 'opened')


@bridge.getter(message="Get issue %1 assignee",
               arguments=[
                   BlockArgument(str, "Add here an issue variable"),
               ],
               block_result_type=str)
def get_issue_assignee(issue_pointer, extra_data):
   def _get_assignee(issue):
       assignees = issue.attributes['assignees']
       if assignees is None or len(assignees) == 0:
           return 'none'
       return assignees[0]['username']

   return _get_issue_property(issue_pointer, extra_data,
                              _get_assignee)


@bridge.getter(message="Get issue %1 author",
               arguments=[
                   BlockArgument(str, "Add here an issue variable"),
               ],
               block_result_type=str)
def get_issue_author(issue_pointer, extra_data):
   return _get_issue_property(issue_pointer, extra_data,
                              lambda issue: issue.attributes['author']['username'])


@bridge.getter(message="Get issue %1 title",
               arguments=[
                   BlockArgument(str, "Add here an issue variable"),
               ],
               block_result_type=str)
def get_issue_title(issue_pointer, extra_data):
   return _get_issue_property(issue_pointer, extra_data,
                              lambda issue: issue.attributes['title'])


@bridge.getter(message="Get issue %1 URL",
               arguments=[
                   BlockArgument(str, "Add here an issue variable"),
               ],
               block_result_type=str)
def get_issue_url(issue_pointer, extra_data):
   return _get_issue_property(issue_pointer, extra_data,
                              lambda issue: issue.attributes['web_url'])


if __name__ == "__main__":
    logging.basicConfig()
    logging.getLogger().setLevel(logging.DEBUG)

    bridge.endpoint = config.get_bridge_endpoint()
    bridge.run()
